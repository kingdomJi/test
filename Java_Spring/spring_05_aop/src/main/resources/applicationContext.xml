<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/aop"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           https://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           https://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop
           https://www.springframework.org/schema/aop/spring-aop.xsd ">
    <!--注册类-->
    <bean id="log" class="com.jiang.log.Log"></bean>
    <bean id="afterLog" class="com.jiang.log.Afterlog"></bean>
    <bean id="userService" class="com.jiang.service.UserServiceImpl"></bean>
    <!--用spring实现aop的方法-->

    <!--方式一：使用spring的API接口-->
    <!--配置aop-->
<!--    <aop:config>-->
<!--        &lt;!&ndash;切入点：-->
<!--        expression表达式：execution（要执行的位置,修饰词，返回值，类名，方法名，参数）这里可以用通配符，-->
<!--        execution（）是常用切入点表达式&ndash;&gt;-->
<!--        <aop:pointcut id="pointcut" expression="execution(* com.jiang.service.UserServiceImpl.*(..))"/>-->
<!--        &lt;!&ndash;第一个*号表示返回类型是所有类型，第二个*(..) 表示UserServiceImpl当前包和所有子包下所有类的方法&ndash;&gt;-->
<!--        &lt;!&ndash;执行环绕增加&ndash;&gt;-->
<!--        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/> &lt;!&ndash;这里指把Log类切入到方法pointcut上面&ndash;&gt;-->
<!--        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>-->
<!--    </aop:config>-->

    <!--方式二：自定义类-->
    <bean id="mydiy" class="com.jiang.diy.Mydiy"/>
<!--    <aop:config>-->
<!--        &lt;!&ndash;切面aspect引用自己的diy类，这里切面也是一个类&ndash;&gt;-->
<!--        <aop:aspect ref="mydiy">-->
<!--            &lt;!&ndash;定义切入点，切入点为package.UserServiceImpl类下的所有方法&ndash;&gt;-->
<!--            <aop:pointcut id="point" expression="execution(* com.jiang.service.UserServiceImpl.*(..))"/>-->
<!--            &lt;!&ndash;插入before通知，method来自自己的mydiy类，引用到位置point处,也就是说这里插入的方法会在point之前执行&ndash;&gt;-->
<!--            <aop:before method="before" pointcut-ref="point"/>-->
<!--            &lt;!&ndash;after这里插入的方法会在point位置之后执行&ndash;&gt;-->
<!--            <aop:after method="after" pointcut-ref="point"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->

<!--方式三：注解实现aop-->
<bean id="annotationPointcut" class="com.jiang.diy.AnnotationPointcut"/>
<!--开启注解支持 JDK（proxy-target-class="false"） cjlib(proxy-target-class="ture")-->
<aop:aspectj-autoproxy proxy-target-class="false"/>
</beans>